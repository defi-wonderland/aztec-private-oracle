/* Autogenerated file, do not edit! */
  
use dep::std;
use dep::aztec::context::{ PrivateContext, PublicContext };
use dep::protocol_types::constants::RETURN_VALUES_LENGTH;

struct RequesterSubmitAnswerStruct {
  address: Field,
}

struct FromSubmitQuestionStruct {
  address: Field,
}

struct DivinityAddressSubmitQuestionStruct {
  address: Field,
}


// Interface for calling PrivateOracle functions from a private context
struct PrivateOraclePrivateContextInterface {
  address: Field,
}

impl PrivateOraclePrivateContextInterface {
  pub fn at(address: Field) -> Self {
      Self {
          address,
      }
  }
  
  pub fn cancel_question(
    self,
    context: &mut PrivateContext,
    question: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 1];
    serialized_args[0] = question;

    context.call_private_function(self.address, 0x7d126cd4, serialized_args)
  }
  

  pub fn consult_answer(
    self,
    context: &mut PrivateContext,
    question: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 1];
    serialized_args[0] = question;

    context.call_private_function(self.address, 0x907da598, serialized_args)
  }
  

  pub fn initialize_payment_token(
    self,
    context: &mut PrivateContext,
    payment_token: Field,
    fee: Field
  ) {
    let mut serialized_args = [0; 2];
    serialized_args[0] = payment_token;
    serialized_args[1] = fee;

    context.call_public_function(self.address, 0x233e29de, serialized_args)
  }
  

  pub fn submit_answer(
    self,
    context: &mut PrivateContext,
    question: Field,
    requester: RequesterSubmitAnswerStruct,
    answer: [Field;3]
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 5];
    serialized_args[0] = question;
    serialized_args[1] = requester.address;
    serialized_args[2] = answer[0];
    serialized_args[3] = answer[1];
    serialized_args[4] = answer[2];

    context.call_private_function(self.address, 0xe9e92c15, serialized_args)
  }
  

  pub fn submit_question(
    self,
    context: &mut PrivateContext,
    from: FromSubmitQuestionStruct,
    question: Field,
    divinity_address: DivinityAddressSubmitQuestionStruct,
    nonce: Field,
    callback: [Field;6]
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 10];
    serialized_args[0] = from.address;
    serialized_args[1] = question;
    serialized_args[2] = divinity_address.address;
    serialized_args[3] = nonce;
    serialized_args[4] = callback[0];
    serialized_args[5] = callback[1];
    serialized_args[6] = callback[2];
    serialized_args[7] = callback[3];
    serialized_args[8] = callback[4];
    serialized_args[9] = callback[5];

    context.call_private_function(self.address, 0xb9d88bb1, serialized_args)
  }
  
}
  
  


// Interface for calling PrivateOracle functions from a public context
struct PrivateOraclePublicContextInterface {
  address: Field,
}

impl PrivateOraclePublicContextInterface {
  pub fn at(address: Field) -> Self {
      Self {
          address,
      }
  }
  
  pub fn initialize_payment_token(
    self,
    context: PublicContext,
    payment_token: Field,
    fee: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialized_args = [0; 2];
    serialized_args[0] = payment_token;
    serialized_args[1] = fee;

    context.call_public_function(self.address, 0x233e29de, serialized_args)
  }
  
}
  
  
