
/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  Point,
  PublicKey,
  Wallet,
} from '@aztec/aztec.js';
import MockOracleCallbackContractArtifactJson from '../target/MockOracleCallback.json' assert { type: 'json' };
export const MockOracleCallbackContractArtifact = MockOracleCallbackContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract MockOracleCallback;
 */
export class MockOracleCallbackContract extends ContractBase {
  
  private constructor(
    completeAddress: CompleteAddress,
    wallet: Wallet,
    portalContract = EthAddress.ZERO
  ) {
    super(completeAddress, MockOracleCallbackContractArtifact, wallet, portalContract);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    address: AztecAddress,
    wallet: Wallet,
  ) {
    return Contract.at(address, MockOracleCallbackContract.artifact, wallet) as Promise<MockOracleCallbackContract>;
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, ) {
    return new DeployMethod<MockOracleCallbackContract>(Point.ZERO, wallet, MockOracleCallbackContractArtifact, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet, ) {
    return new DeployMethod<MockOracleCallbackContract>(publicKey, wallet, MockOracleCallbackContractArtifact, Array.from(arguments).slice(2));
  }
  

  
  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return MockOracleCallbackContractArtifact;
  }
  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    
    /** compute_note_hash_and_nullifier(contract_address: field, nonce: field, storage_slot: field, serialized_note: array) */
    compute_note_hash_and_nullifier: ((contract_address: FieldLike, nonce: FieldLike, storage_slot: FieldLike, serialized_note: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** deserialize_callback_data() */
    deserialize_callback_data: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_received_data(inputs: struct) */
    get_received_data: ((inputs: { call_context: { msg_sender: FieldLike, storage_contract_address: FieldLike, portal_contract_address: FieldLike, function_selector: FieldLike, is_delegate_call: boolean, is_static_call: boolean, is_contract_deployment: boolean }, block_data: { note_hash_tree_root: FieldLike, nullifier_tree_root: FieldLike, contract_tree_root: FieldLike, l1_to_l2_messages_tree_root: FieldLike, blocks_tree_root: FieldLike, public_data_tree_root: FieldLike, global_variables_hash: FieldLike }, public_global_variables: { chain_id: FieldLike, version: FieldLike, block_number: FieldLike, timestamp: FieldLike } }) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** oracle_callback(answer: field, data: array) */
    oracle_callback: ((answer: FieldLike, data: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** serialize_callback_data() */
    serialize_callback_data: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** write_received_data(answer: field, data: array) */
    write_received_data: ((answer: FieldLike, data: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}
